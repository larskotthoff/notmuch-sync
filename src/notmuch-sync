#!/usr/bin/env python

import sys
import os
import struct
import subprocess
import socket
import json
import shlex

from contextlib import contextmanager

import notmuch2

def get_changes(db, fname):
    """Get changes that happened since the last sync, or everything in the DB if no previous sync."""
    rev_prev = 0
    try:
        with open(fname, 'r', encoding="utf-8") as f:
            tmp = f.read().strip('\n\r').split(' ')
            uuid = db.revision().uuid.decode()
            try:
                if tmp[1] != uuid:
                    sys.exit(f"Last sync with UUID {tmp[1]}, but notmuch DB has UUID {uuid}, aborting...")
                rev_prev = int(tmp[0])
            except Exception:
                sys.exit(f"Sync state file {fname} corrupted, delete to sync from scratch.")
    except FileNotFoundError:
        # no previous sync or sync file broken, leave rev_prev at 0 as this will sync entire DB
        pass

    prefix = os.path.join(str(db.default_path()), '')
    return {msg.messageid: {"tags": list(msg.tags), "files": [
        str(f).removeprefix(prefix) for f in msg.filenames() ]} for msg in
            db.messages(f"lastmod:{rev_prev}..")}


@contextmanager
def initial_changes(args):
    with notmuch2.Database(mode=notmuch2.Database.MODE.READ_WRITE) as db:
        fname = os.path.join(str(db.default_path()), ".notmuch", f"notmuch-sync-{args.remote or args.host}")
        changes = get_changes(db, fname)
        yield (db, changes)
        with open(fname, 'w', encoding="utf-8") as f:
            f.write(f"{db.revision().rev} {db.revision().uuid.decode()}")


def sync_tags(db, changes_mine, changes_theirs):
    for id in changes_theirs:
        tags = changes_theirs[id]["tags"]
        if id in changes_mine:
            tags = list(set(tags) | set(changes_mine[id]["tags"]))
        tags = set(tags)
        try:
            msg = db.find(id)
            if tags != set(msg.tags):
                with msg.frozen():
                    msg.tags.clear()
                    for tag in tags:
                        msg.tags.add(tag)
                    msg.tags.to_maildir_flags()
        except LookupError:
            # we don't have this message on our side, it will be added later
            # when syncing files
            pass


def sync_server(args):
    #print("READY", flush=True)
    #while True:
    #    line = sys.stdin.readline()
    #    if not line:
    #        break
    #    line = line.strip()
    #    if line.startswith("SEND_FILE"):
    #        _, filename = line.split(maxsplit=1)
    #        size_data = sys.stdin.buffer.read(4)
    #        size = struct.unpack("!I", size_data)[0]
    #        content = sys.stdin.buffer.read(size)
    #        with open(f"received_{os.path.basename(filename)}", "wb") as f:
    #            f.write(content)
    #        print(f"RECEIVED {filename}", flush=True)
    #    elif line == "BYE":
    #        print("GOODBYE", flush=True)
    #        break

    with initial_changes(args) as (db, changes_mine):
        print(json.dumps(changes_mine))
        changes_theirs = json.loads(sys.stdin.readline())
        sync_tags(db, changes_mine, changes_theirs)


def sync_client(args):
    if args.remote_cmd:
        cmd = shlex.split(args.remote_cmd)
    else:
        cmd = shlex.split(args.ssh_cmd) + [(f"{args.user}@" if args.user else "") + args.remote, f"{args.path} --from {socket.getfqdn()}"]
    proc = subprocess.Popen(
        cmd,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        bufsize=1
    )

    stdout = proc.stdout
    stderr = proc.stderr
    stdin = proc.stdin

    with initial_changes(args) as (db, changes_mine):
        print(json.dumps(changes_mine), file=stdin)
        changes_theirs = json.loads(stdout.readline())
        sync_tags(db, changes_mine, changes_theirs)

    ## Wait for "READY"
    #ready_line = stdout.readline()
    #if not ready_line.strip().decode().startswith("READY"):
    #    print("Remote script did not start correctly.")
    #    return

    #for file_path in files:
    #    filename = os.path.basename(file_path)
    #    with open(file_path, "rb") as f:
    #        content = f.read()

    #    # Send metadata
    #    stdin.write(f"SEND_FILE {filename}\n".encode())
    #    stdin.flush()

    #    # Send file length and data
    #    stdin.write(struct.pack("!I", len(content)))
    #    stdin.write(content)
    #    stdin.flush()

    #    # Read acknowledgment
    #    print(stdout.readline().strip().decode())

    #stdin.write(b"BYE\n")
    #stdin.flush()

    #print(stderr.read(), file=sys.stderr)

    stdin.close()
    stdout.close()
    stderr.close()
    proc.wait()

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-r", "--remote", type=str, help="remote host to sync with")
    parser.add_argument("-f", "--host", type=str, help="host to sync with (use with --remote-cmd)")
    parser.add_argument("-u", "--user", type=str, help="SSH user to use")
    parser.add_argument("-v", "--progress", action="store_true", help="show progress, not just summary")
    parser.add_argument("-s", "--ssh-cmd", type=str, default="ssh -CTaxq", help="SSH command to use")
    parser.add_argument("-m", "--mbsync", action="store_true", help="sync mbsync files (.mbsyncstate, .uidvalidity)")
    parser.add_argument("-p", "--path", type=str, default=os.path.basename(sys.argv[0]), help="path to notmuch-sync on remote server")
    parser.add_argument("-c", "--remote-cmd", type=str, help="command to run to sync; overrides --remote, --user, --ssh-cmd, --path")
    args = parser.parse_args()

    if args.remote or args.remote_cmd:
        sync_client(args)
    else:
        sync_server(args)
